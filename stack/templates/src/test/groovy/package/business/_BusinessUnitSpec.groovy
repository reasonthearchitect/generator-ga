package <%=packageName%>.test.business.business

import <%=packageName%>.business.I<%=entityClass%>Business
import <%=packageName%>.business.impl.<%=entityClass%>Business
import <%=packageName%>.domain.<%=entityClass%>
import <%=packageName%>.repository.I<%=entityClass%>Repository
import org.springframework.data.domain.PageImpl;
import spock.lang.Specification

/**
 * Generated unit test for the <%=entityClass%>Business objects.
 */
class <%=entityClass%>BusinessUnitSpec extends Specification {

    I<%=entityClass%>Business <%=entityInstance%>Business;

    def setup() {
        this.<%=entityInstance%>Business = new <%=entityClass%>Business();
    }

    def "simple findOne method spec generated by the framework"() {

        setup:
        def <%=entityInstance%>Repository = Mock(I<%=entityClass%>Repository);
        this.<%=entityInstance%>Business.<%=entityInstance%>Repository = <%=entityInstance%>Repository;
        def r<%=entityInstance%> = [id:1L] as <%=entityClass%>;

        when:
        def <%=entityInstance%> = this.<%=entityInstance%>Business.findOne(1L);

        then:
        1 * <%=entityInstance%>Repository.findOne(_) >> r<%=entityInstance%>;
        <%=entityInstance%> != null;
        <%=entityInstance%>.id == 1L;
    }

    def "simple find all method spec generated by the framework"() {

        setup:
        def <%=entityInstance%>Repository = Mock(I<%=entityClass%>Repository);
        this.<%=entityInstance%>Business.<%=entityInstance%>Repository = <%=entityInstance%>Repository;
        def r<%=entityInstance%>s = [[id:1L] as <%=entityClass%>, [id:1L] as <%=entityClass%>];

        when:
        def <%=entityInstance%>s = this.<%=entityInstance%>Business.findAll(null);

        then:
        1 * <%=entityInstance%>Repository.findAll(_) >> new PageImpl<<%=entityClass%>>(r<%=entityInstance%>s);
        <%=entityInstance%>s.getTotalElements() == 2;
    }

    def "simple save method generated by the framework"(){

        setup:
        def <%=entityInstance%>Repository = Mock(I<%=entityClass%>Repository);
        this.<%=entityInstance%>Business.<%=entityInstance%>Repository = <%=entityInstance%>Repository;
        def r<%=entityInstance%> = [id:1L] as <%=entityClass%>;

        when:
        def saved<%=entityClass%> = this.<%=entityInstance%>Business.save([]as <%=entityClass%>);

        then:
        1 * <%=entityInstance%>Repository.save(_) >> r<%=entityInstance%>;
        saved<%=entityClass%>.id != null;
    }

    def "simple delete method generated by the framework"() {
        setup:
        def <%=entityInstance%>Repository = Mock(I<%=entityClass%>Repository);
        this.<%=entityInstance%>Business.<%=entityInstance%>Repository = <%=entityInstance%>Repository;

        when:
        this.<%=entityInstance%>Business.delete([] as <%=entityClass%>);

        then:
        1 * <%=entityInstance%>Repository.delete(_);
    }
}
